# -- WebGoat.NET Vulnerable .net application --
#
# Example Veracode Scan in Azure Pipelines
# The pipeline will perform SCA + SAST Policy Scan on the Main branch
# Scan Results and Findings are imported into Azure DevOps Boards

trigger:
  branches:
    include: 
      - 'auto-package'

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Debug'

steps:
- task: NuGetToolInstaller@1

- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'

- task: VSBuild@1
  inputs:
    solution: '$(solution)'
    msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:PackageLocation="$(build.artifactStagingDirectory)"'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

- task: ArchiveFiles@2
  inputs:
    rootFolderOrFile: '$(Build.SourcesDirectory)/WebGoat/bin'
    IncludeRootFolder: true
    archiveType: zip
    archiveFile: '$(Build.ArtifactStagingDirectory)/bin.zip'
    replaceExistingArchive: true
    verbose: true

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      # Define variables
      $veracodeWrapperUrl = "https://tools.veracode.com/integrations/API-Wrappers/CSharp/bin/VeracodeCSharpAPI.zip"
      $veracodeWrapperZip = "VeracodeCSharpAPI.zip"
      $veracodeWrapperDir = "VeracodeCSharpAPI"
      $veracodeAPIKey = ${env:VERACODE_API_ID}
      $veracodeAPISecret = ${env:VERACODE_API_SECRET}
      $veracodeAppID = "WebGoat Auto Package"
      $veracodeSandboxID = "YOUR_VERACODE_SANDBOX_ID"

      # Download Veracode C# API wrapper
      Invoke-WebRequest -Uri $veracodeWrapperUrl -OutFile $veracodeWrapperZip

      # Extract Veracode C# API wrapper
      Expand-Archive -Path $veracodeWrapperZip -DestinationPath $veracodeWrapperDir

      # Navigate to Veracode C# API wrapper directory
      cd $veracodeWrapperDir

      # Run Veracode static analysis using the wrapper
      #.\VeracodeAPI.exe -vid ${env:VERACODE_API_ID} -vkey ${env:VERACODE_API_SECRET} -action UploadAndScan -appid $veracodeAppID
      .\VeracodeC#API.exe -action uploadandscan `
          -vid $veracodeAPIKey `
          -vkey $veracodeAPISecret `
          -appname "Webgoat AutoPackage" `
          -createprofile true `
          -criticality High `
          -version $(Build.BuildId) `
          -selectedpreviously true `
          -scantimeout 30 `
          -filepath '$(build.artifactstagingdirectory)/bin.zip'



- task: Veracode@3
  displayName: Veracode Policy Scan
  inputs:
    ConnectionDetailsSelection: 'Endpoint'
    AnalysisService: 'veracode_scan'
    veracodeAppProfile: 'WebGoat.new'
    version: '$(Build.BuildId)'
    filepath: '$(build.artifactstagingdirectory)/bin.zip'
    createProfile: true
    importResults: true
    maximumWaitTime: '45'
    failBuildOnPolicyFail: true
    optargs: '-criticality medium'
  condition: false
  
- task: Veracode Flaw Importer@3
  displayName: Veracode Import Scan Findings
  inputs:
    ConnectionDetailsSelection: 'Endpoint'
    AnalysisService: 'veracode_scan'
    veracodeAppProfile: 'WebGoat.net'
    sandboxName: 
    importType: 'All Unmitigated Flaws Violating Policy'
    workItemType: 'Issue'
    area: '$(system.teamProject)'
    flawImportLimit: '1000'
  condition: false

- task: GithubRelease@0
  displayName: ‘Create GitHub Release’
  inputs:
    githubConnection: wasptree
    repositoryName: wasptree/WebGoat.NET
    action: 'create'
    tagSource: 'manual'
    tag: '$(Build.BuildNumber)'
    assets: '$(Build.ArtifactStagingDirectory)\bin.zip'
    assetUploadMode: delete

- task: VSTest@2
  inputs:
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'
